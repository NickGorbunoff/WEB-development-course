<pre>
<?php /*
// 1994 PHP/FI  // Personal Homepages Tools PHP/FI
// 1997 PHP 3.0 // Hypertext Preprocessor
// 1999 PHP 4.0 // Zend Engine
// 2004 PHP 5
// 2006 - 2010 PHP 6 = PHP 5.4
// 2015 PHP 7

*/ ?>

<h1>PHP</h1>


<?php
// Рекомендуется к использованию.
// код РНР

// Это комментарий

# Это комментарий

/*
блочный
комментарий
*/

?>


<?
// short tags (не рекомендуется)
// Для этого тэга параметр "short_open_tag" в php.ini должен быть "on"
?>

<?php /*
// The ASP tags
<%, %>
<%=
<script language="php">
*/ ?>


<?php

//echo "Hello world";

/*
echo
"Hello world";
*/


// Вывод данных
//print("Привет, это просто текст");
//echo "<h1>Привет, это просто текст</h1>";
//
//echo "<h1>","Просто текст","</h1>";

?>


<?php echo "<h1>","Просто текст","</h1>"; ?>
<?= "<h1>","Просто текст","</h1>"; ?>


<?php

// Переменные

// Все имена переменных должны начинаться со знака доллара ($)
// Первым символом после $ должна быть буква или символ подчеркивания. Далее, в имени переменной могут присутствовать буквы, цифры и символ подчеркивания.
// Имена переменных зависят от регистра


// Присвоение значения переменной и ее удаление
//$foo = 'Bob';
//$foo = "Mike";
//$foo = 2 + 2;
//$tmp = $foo;
//
//echo $foo;
//
//unset($foo); //Удаляем переменную $foo
//
//echo $foo;
//


// Типы данных


// boolean
// integer
// float
// string

// array
// object


// resourse
// NULL


// boolean
// TRUE и FALSE – регистро-независимы.

// При преобразовании в логический тип, следующие значения рассматриваются как FALSE:
// 0
// 0.0
// "" или "0"
// []
// NULL


// integer
// $int = 1234; // десятичное число
// $int = -123; // отрицательное число
// $int = 0123; // восьмеричное число
// $int = 0x1A; // шестнадцатеричное число

// float

//$flt = 1.234;
//$flt = 1.2e3;
//$flt = 7E-10;


// string

// \n новая строка
// \r возврат каретки
// \t горизонтальная табуляция
// \ обратная косая черта
// \$ знак доллара

/*
echo "это простая строка";

echo "это простая \n\r строка";


$a = 'some text';
echo "это простая $a строка";

echo 'это простая $a строка';
echo 'это простая \n\r строка';

echo "<br>";
echo 'это простая ' . $a . ' строка';
echo "<br>";
echo 'это простая ' , $a , ' строка';

*/


// heredoc
/*
$str = <<< LABEL
Пример строки,
охватывающей несколько строчек, с использованием heredoc-синтаксиса. Это очень похоже на использование HTML-тэга <PRE>.
И переменные сюда тоже можно подставлять, а также использовать специальные символы.
LABEL;

echo $str;
*/


//NULL


// Экранирование переменных

//$beer = 'Heineken';

//echo "$beer's taste is great";

//echo "He drank some $beers"; // Ошибка
//echo "He drank some ${beer}s"; // Работает, переменная экранирована
//echo "He drank some {$beer}s"; // Работает, переменная экранирована


// Доступ к символу в строке
/*
$str = 'Hello, world!';

// Получение первого символа строки
$first = $str{0}; //H



// Получение третьего символа строки
$third = $str{2};// l

// Получение последнего символа строки
$len = strlen($str); //13
$pos = $len-1; //12
$last = $str{$pos}; // !
echo $last;
*/


// Операторы: арифметические
/*
$a + $b // Сумма $a и $b
$a - $b // Разность $a и $b
$a * $b // Произведение $a и $b
$a / $b // Частное от деления $a на $b
$a % $b // Целочисленный остаток от деления $a на $b
5/2 равно 2.5, но 5%2 равно 1
$a += $b // Тоже, что и $a = $a + $b.
Остальные операторы работают аналогично.
*/

// Операторы: строковые
/*
$a = "Hello ";
$b = $a . "World!";
$b = "World!";
*/


// Полезные функции
// isset()
/*
if (isset($beers)) {
    echo $beers;
}
*/

/*
$beer = 'Heineken';
$beers = 'Rogan';

if (isset($beers)) {
    echo $beers;
}else {
    echo $beer;
}
*/

// empty()
/*
if (!empty($beer)) {
    echo $beer;
}
*/


// gettype(имя_переменной)
// settype(имя_переменной, “тип”) - конвертирует переменную в другой тип.
// приведение типа: (тип) имя_переменной
$stringvar = "5";
(int) $stringvar
?>
</pre>


